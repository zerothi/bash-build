#!/bin/bash -i
# For debugging
# set -v
#  Print bash commands before they are executed
# set -x
#  Prints entire command trace before each command

# Set the umask 022 means read and execute
# This should be the default for our installation
umask 022

_top_dir=`pwd`

source ~/.bashrc
module purge

# Ensure that there is not multiple threads running
export OMP_NUM_THREADS=1

# On thul and interactive nodes, sourching leads to going back
cd $_top_dir

# We have here the installation of all the stuff for gray....
source src/init.bash

# Default prefix installation
_prefix=/opt
_signal_default=1

# Default python version installed
_python_version=3
# Default MPI version
declare -l _mpi_version=openmpi
# Default name for build which builds the generic
# packages.
_b_name_generic=generic
_b_name_default=generic
while [ $# -gt 0 ]; do
    trim_em opt $1
    case $opt in
	-*)
	    shift
	    ;;
    esac
    case $opt in

	-prefix)
	    _prefix=$1
	    touch $_prefix/.bash-build-test-file
	    if [[ $? -ne 0 ]]; then
		doerr "Prefix" "cannot write to installation directory, please chmod"
		exit 1
	    else
		rm $_prefix/.bash-build-test-file
	    fi
	    ;;
	
	-gnu-version)
	    gnu_version=$1
	    ;;
	
	-gen-gnu-version)
	    gen_gnu_version=$1
	    ;;

	# Basic options for every kind of
	# build customization...
	-python-version|-pv)
	    _python_version=$1
	    case $_python_version in
		2|3)
		    ;; # fine
		*)
		    doerr "option parsing" "Python version does not exist [2|3]"
		    ;;
	    esac
	    shift ;;
	-mpi)
	    _mpi_version=$1
	    case $_mpi_version in
		openmpi|mpich|mvapich)
		    noop
		    ;; # fine
		ompi)
		    _mpi_version=openmpi
		    ;;
		*)
		    doerr "option parsing" "MPI version does not exist [OpenMPI|MPICH|MVAPICH]"
		    ;;
	    esac
	    shift ;;
	-tcl|-env-mod)
	    _mod_format=$_mod_format_ENVMOD
	    ;;
	-lua|-lmod)
	    _mod_format=$_mod_format_LMOD
	    ;;
	-generic)
	    _b_name_generic=$1
	    shift ;;
	-default|-d)
	    _b_name_default=$1
	    shift ;;
	-list)
	    export PACK_LIST=1
	    ;;
	-n)
	    set_procs $1
	    shift
	    ;;
	-only)
	    pack_only $1
	    shift ;;
	-only-file)
	    pack_only --file $1
	    shift ;;
	-help|-h)
	    help_
	    exit 0
	    ;;
	-build)
	    opt=$1
	    ;& # go through
	*)
	    # We consider empty stuff to be builds
	    if [ ! -e $opt ]; then
		doerr "option parsing" "Build source $opt does not exist!"
	    fi
	    _signal_default=0
	    source $opt
	    shift
	    ;;
    esac
done

# If the user have not specified any build-instructions
# we will commense our own default build
if [[ $_signal_default -eq 1 ]]; then
    source src/default_build.bash
fi

# We should now have populated all builds
# Check if the _b_name_generic exists
tmp=$(get_index --hash-array "_b_index" $_b_name_generic)
if [ -z "$tmp" ]; then
    doerr "option parsing" "Unrecognized build $_b_name_generic, create it first"
else
    build_set --default-build $_b_name_generic
    msg_install --message "The default build for the generic packages is: $_b_name_generic"
    source $(build_get --source)
fi
tmp=$(get_index --hash-array "_b_index" $_b_name_default)
if [ -z "$tmp" ]; then
    doerr "option parsing" "Unrecognized build $_b_name_default, create it first"
else
    msg_install --message "The default build for packages is: $_b_name_default"
fi

# Notify the user about which module files will be generated
msg_install --message "Will create $_mod_format compliant module files"

msg_install --message "Will build with $_n_procs processors"

tmp=0
while [ $tmp -lt $_N_b ]; do
    if [ -z "$(build_get --installation-path[$tmp])" ]; then
	msg_install --message "The installation path for ${_b_name[$tmp]} has not been set."
	echo "I do not dare to guess where to place packages!"
	echo "Please set it in your source file."
	exit 1
    fi

    if [ -z "$(build_get --module-path[$tmp])" ]; then
	msg_install --message "The module path for ${_b_name[$tmp]} has not been set."
	msg_install --message "Will set it to: $(build_get --installation-path[$tmp])/modules"
	build_set --module-path "$(build_get --installation-path[$tmp])/modules"
    fi
    # DEBUG
    #build_print $tmp
    let tmp++
done

# Begin installation of various packages
# List of archives
# The order is the installation order
# We can always set the env-variable of LMOD
export LMOD_IGNORE_CACHE=1

# Far more often than not, we need Modules to be installed before
source_pack helpers/modules.bash


# Check that modules was installed previously, and if
# that isn't the case, error out and denote the user should
# rerun the script..
if [[ $_has_module_cmd -eq 0 ]]; then
    msg_install --message "Please rerun the script and add $(pack_get --prefix modules) to your path (for correct environment variable)"
    msg_install --message "For environment modules, add this to your .bashrc: 'source $(pack_get --prefix modules)/$(pack_get --version modules)/init/bash'"
    exit 1
fi
# Now check that all module-paths are actually used
_has_module_path=1
for ib in `seq 0 $_N_b` ; do
    path=$(build_get --module-path[$ib])
    if [[ $(check_modulepath $path) -eq 0 ]]; then
	msg_install --message "Module path: '$path' is not in env(MODULEPATH)"
	msg_install --message "Add this to your .bashrc: 'module use --append $path'"

	_has_module_path=0
    fi
done
path=$(build_get --module-path[$_b_name_default])-apps
if [[ $(check_modulepath $path) -eq 0 ]]; then
    module use -p $path
fi
if [[ $(check_modulepath $path) -eq 0 ]]; then
    msg_install --message "Module path: '$path' is not in env(MODULEPATH)"
    msg_install --message "Add this to your .bashrc: 'module use --append $path'"
    
    _has_module_path=0
fi
if [[ $_has_module_path -eq 0 ]]; then
    msg_install --message "Please correct your environment, the module path is not consistent with your build."
    exit 1
fi

# Vendor libraries do not depend on anything...
source vendor.bash

# Install the helper
source helpers.bash

# Install the lua-libraries
source lua/install.bash

# Install helper scripts
# These should _never_ have any dependencies.
# However, the Lmod switch requires LMOD (for usage, not for installation)
source scripts.bash

# Set the future correct default build as
# requested by the user.
build_set --default-build $_b_name_default

# We need to update the module requirements for the
# build (for instance if gnu-X.X.X has not been expanded)
build_set --reset-module \
	  $(list --prefix "--default-module " \
		 $(build_get --default-module))
# Do the same for the debug build
build_set --reset-module[debug] \
	  $(list --prefix '--default-module[debug] ' \
		 $(build_get --default-module))

# Source the compiler specifications to ensure the correct
# versions has been set etc.
source $(build_get --source)

# Install all libraries
source libs.bash

# These are "parent" installations...
source julia.bash
source python${_python_version}.bash
source R.bash

# We have installed all libraries needed for doing application installs
source apps.bash

# Add the default modules
source default.bash

# Add the latest modules
source latest.bash

msg_install --message "Finished installing all applications..."


# When dealing with additional sets of instructions spec files
# can come in handy.
# For instance to add an include directory to all cpp files do
# gcc -dumpspecs > specs
# Edit specs in line *cpp:
# and add -I<folder>
# Per default will gcc read specs in the folder of generic libraries:
# gcc -print-libgcc-file-name (dir)
